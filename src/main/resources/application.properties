
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
# validate: validate the schema, makes no changes to the database.
# update: update the schema.
# create: creates the schema, destroying previous data.
# create-drop: drop the schema at the end of the session
# none: is all other cases.
spring.jpa.hibernate.ddl-auto = update

# Mapping Java objects to database tables and vice versa is called Object-relational mapping (ORM).
# The Java Persistence API (JPA) is one possible approach to ORM.
# Via JPA the developer can map, store, update and retrieve data from relational databases to Java objects and vice versa.
# JPA can be used in Java-EE and Java-SE applications.

# All the supported logging systems can have the logger levels set in the Spring Environment (ex, in application.properties)
#   by using logging.level.<logger-name>=<level> where level is one of TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF.
# The root logger can be configured by using logging.level.root.

logging.level.root=INFO
